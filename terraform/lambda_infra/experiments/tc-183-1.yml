version: 1.0.0
title: Kubernetes Cluster (Outposts)-Kubernetes (Self-Managed)-Worker Node-Kubernetes Ingress Controller-Network-Inbound/OutBound Connectivity
description: 
tags:
  - stress-network-ingress
configuration:
  test_instance_tag_key: 'tag:aws:eks:cluster-name'
  test_instance_tag_value: 'blueprint'
method:
  #F5 load balancer
  - type: action
    name: Establish load of 1000 tps
    provider:
      type: python
      module: experimentvr.load.actions
      func: load_generate
      arguments:
        count: 1000
  - type: action
    name: Crash 1 Ingress Controller on the K8s Cluster by terminating 1 EC2 instance from AWS console
    provider:
      type: python
      module: experimentvr.ec2.actions
      func: terminate_instance
      arguments:
        tag_key: ${test_instance_tag_key}
        tag_value: ${test_instance_tag_value}
  # - type: probe
  #   name: Alert that Ingress Controller EC2 instance is terminated
  #   provider:
  #     type: python
  #     module: experimentvr.prometheus.probes
  #     #add function to determine EC2 instance state
  #     func: desired_equals_healthy
  # - type: probe
  #   name: load_report
  #   provider:
  #       type: python
  #       module: experimentvr.load.probes
  #       func: load_probe_relative
  #       arguments:
  #           testday: "`r format(Sys.time(), '%d %B, %Y')`"
  #           minutes: 20
  #           sla: '250'
  #           missed_percent: 65
#Repeat steps with load of 10000 tps
  - type: action
    name: Establish load of 10000 tps
    provider:
      type: python
      module: experimentvr.load.actions
      func: load_generate
      arguments:
        count: 10000
  - type: action
    name: Crash 1 Ingress Controller on the K8s Cluster by terminating 1 EC2 instance from AWS console
    provider:
      type: python
      module: experimentvr.ec2.actions
      func: terminate_instance
      arguments:
        tag_key: ${test_instance_tag_key}
        tag_value: ${test_instance_tag_value}
  # - type: probe
  #   name: Alert that Ingress Controller EC2 instance is terminated
  #   provider:
  #     type: python
  #     module: experimentvr.prometheus.probes
  #     #add function to determine EC2 instance state
  #     func: desired_equals_healthy
  # - type: probe
  #   name: load_report
  #   provider:
  #       type: python
  #       module: experimentvr.load.probes
  #       func: load_probe_relative
  #       arguments:
  #           testday: "`r format(Sys.time(), '%d %B, %Y')`"
  #           minutes: 20
  #           sla: '250'
  #           missed_percent: 65



